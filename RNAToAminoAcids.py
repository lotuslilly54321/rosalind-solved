#
# RNAToAminoAcids.py
# Bat, Cat, Rat, Bunt
#

from Bio import SeqIO

# Read all files
with open('chr1.FASTA', 'r') as chr1_file:
    for record in SeqIO.parse(chr1_file, 'fasta'):
        identifier = record.id
        description = record.description
        chr1 = record.seq

with open('chr2.FASTA', 'r') as chr2_file:
    for record in SeqIO.parse(chr2_file, 'fasta'):
        identifier = record.id
        description = record.description
        chr2 = record.seq
        #print(findProtein(chr2, penicillin))

with open('chr3.FASTA', 'r') as chr3_file:
    for record in SeqIO.parse(chr3_file, 'fasta'):
        identifier = record.id
        description = record.description
        chr3 = record.seq
        #print(findProtein(chr3, penicillin))

with open('A6N339.fasta','r') as pcbAB_file:
    for record in SeqIO.parse(pcbAB_file, 'fasta'):
        identifier = record.id
        description = record.description
        pcbAB = record.seq
        #print(findProtein(pcbAB, penicillin))

penicillin =  'MKNRNRMIVNCVTASLMYYWSLPALAEQSSSEIKIVRDEYGMPHIYANDTWHLFYGYGYVVAQDRLFQMEMARRSTQGTVAEVLGKDFVKFDKDIRRNYWPDAIRAQIAALSPEDMSILQGYADGMNAWIDKVNTNPETLLPKQFNTFGFTPKRWEPFDVAMIFVGTMANRFSDSTSEIDNLALLTALKDKYGVSQGMAVFNQLKWLVNPSAPTTIAVQESNYPLKFNQQNSQTAALLPRYDLPAPMLDRPAKGADGALLALTAGKNRETIAAQFAQGGANGLAGYPTTSNMWVIGKSKAQDAKAIMVNGPQFGWYAPAYTYGIGLHGAGYDVTGNTPFAYPGLVFGHNGVISWGSTAGFGDDVDIFAERLSAEKPGYYLHNGKWVKMLSREETITVKNGQAETFTVWRTVHGNILQTDQTTQTAYAKSRAWDGKEVASLLAWTHQMKAKNWQEWTQQAAKQALTINWYYADVNGNIGYHTGAYPDRQSGHDPRLPVPGTGKWDWKGLLPFEMNPKVYNPQSGYIANWNNSPQKDYPASDLFAFLWGGADRVTEIDRLLEQKPRLTADQAWDVIRQTSRQDLNLRLFLPTLQAATSGLTQSDPRRQLVETLTRWDGINLLNDDGKTWQQPGSAILNVWLTSMLKRTVVAAVPMPFDKWYSASGYETTQDGPTGSLNISVGAKILYEAVQGDKSPIPQAVDLFAGKPQQEVVLAALEDTWETLSKRYGNNVSNWKTPAMALTFRANNFFGVPQAAAEETRHQAEYQNRGTENDMIVFSPTTSDRPVLAWDVVAPGQSGFIAPDGTVDKHYEDQLKMYENFGRKSLWLTKQDVEAHKESQEVLHVQR'


#translations dict from RNA to Amino Acids
    #Stop codons changed to Z for easier readability
translations = {
    'UUU': 'F',
    'CUU': 'L',
    'AUU': 'I',
    'GUU': 'V',
    'UUC': 'F',
    'CUC': 'L',
    'AUC': 'I',
    'GUC': 'V',
    'UUA': 'L',
    'CUA': 'L',
    'AUA': 'I',
    'GUA': 'V',
    'UUG': 'L',
    'CUG': 'L',
    'AUG': 'M',
    'GUG': 'V',
    'UCU': 'S',
    'CCU': 'P',
    'ACU': 'T',
    'GCU': 'A',
    'UCC': 'S',
    'CCC': 'P',
    'ACC': 'T',
    'GCC': 'A',
    'UCA': 'S',
    'CCA': 'P',
    'ACA': 'T',
    'GCA': 'A',
    'UCG': 'S',
    'CCG': 'P',
    'ACG': 'T',
    'GCG': 'A',
    'UAU': 'Y',
    'CAU': 'H',
    'AAU': 'N',
    'GAU': 'D',
    'UAC': 'Y',
    'CAC': 'H',
    'AAC': 'N',
    'GAC': 'D',
    'UAA': 'Z',
    'CAA': 'Q',
    'AAA': 'K',
    'GAA': 'E',
    'UAG': 'Z',
    'CAG': 'Q',
    'AAG': 'K',
    'GAG': 'E',
    'UGU': 'C',
    'CGU': 'R',
    'AGU': 'S',
    'GGU': 'G',
    'UGC': 'C',
    'CGC': 'R',
    'AGC': 'S',
    'GGC': 'G',
    'UGA': 'Z',
    'CGA': 'R',
    'AGA': 'R',
    'GGA': 'G',
    'UGG': 'W',
    'CGG': 'R',
    'AGG': 'R',
    'GGG': 'G'
}

aminoAcids = list(translations.keys())
RNA = list(translations.values())

# Find a given protein within a chromosome using translated chromosome and protein broken down into amino acids
def findProtein(chromosome, protein):
    for i in range(len(chromosome) - (len(protein) - 1)):
        similar = 0
        if chromosome[i] == protein[0]:
            for j in range(0, len(protein) - 1):
                if chromosome[i + j] == protein[j]:
                    similar = similar + 1
            if similar == len(protein) - 1:
                return(True,i)
            else:
                pass
test = 'AAAAAAAAAAAAA'+pcbAB+'AAAAAAAAAAAAAA'
print(findProtein(test,pcbAB))


def findRNA(keys, values, protein):
    possible = []
    for i in range(len(values)):
        if values[i] == protein:
            possible.append(keys[i])
    return(possible)

def posRNAParts(protein, dict):
    protein = protein + 'Z'
    keys = list(dict.keys())
    values = list(dict.values())
    possibles = []
    for c in protein:
        possible = findRNA(keys, values, c)
        possibles.append(possible)
    print(possibles)


def rnaToProtein(rna,dict):
    codons = []
    proteins = []
    for i in range(0, len(rna)/3):
        codon = rna[i*3:(i*3)+3]
        codons.append(codon)
    for cod in range(len(codons)):
        protein = translations[codons[cod]]
        proteins.append(protein)
    return proteins

output = rnaToProtein('AUGUUUCCGAUGGGGGGCUUCAUGUACCACAUCAGAGACCUGUAUGGCCUCGUCAGAUACUCUGAGACGGGGAUUCUAGAUAAAGCCCCUUUUGACGGAGCCUUCCAGUACGGACGGAACAUCCAUGUAGUUGUGAGGCACUAUCCAACUUGGACCCAUAAAUCUCUUCGGGGAGCCCCUAGAAGUACCAGCGAGCCAAGUCUCAUACUCGUAGCAGAAAUUUCAAGCAUCGCGUCCGAUAUGGUUAUGGGUAAAACGCUGGAUCCGGGCCAACACACGAUGGCGCUAGUUAUUUUCUAUAGGUCUAGAAUCCCGGCAACUCCCAACCGAGUGCAGGGGCAGGUUCAAGGGCAGUGGUGCGGGGAGUUAAAACAGCGUCGGCGACUCGAAUCGUCCGCGCGGACUGCUAUAAGUCCUACUCGUCUCCUAAACGGGGAAAUCCGUUUCUCUGAUUGUCCGAUCCGAUACCUAUCCACCGCUAAGUACACAUCAAAUCGGCUUGCCCUUGUAUCUUAUUUCGAAGGGCACCAGAAUACAAUUAGAGCAACUAUCCAGAGUACUCGAUUGGUGGCACGCGGCUCCUACCUACCAGGUUCAUUGUGGGUAGCCCUGGUUGCCUUCGGAGUCGGCCUUCCAGGACAAUUAAAAGCAAUGGGGAAGAGAGGUCGCGGUUAUUACCUUGAUGUGGUCUUGCGAGCCCUCGAAGGGGGACGUGGGGUGACGGGUCCCCAUGAAAAUACACCAGGGUGCAUUGGACUUCAAAAAUCCCCGUCGGGUGCGACCGCCCCGCGACAGCGAUUAUUGCGCGAAUACGUACGGUUCGGCUGUUGCGAAGAAAUUUCGAUACAUGGAUUUUGCCGACUGGGCAAGCCUCGGAAGAGACACCUUGAACAGCCGCUCCGACGCCGUAUGCCCUCCGUGAGAAAUAAAGGUAUGUCUUAUCGUCCGGGCGGGGAUUGUAACCAUUUGCGGCUGUCGGAUAUAGGAAGCCAGAGUAACACAUUUGAAUUGGAAGACCUGGGUCGCUGGCGAGUCAUUUCUCUGCACUACGUUGGUCAUGCCCCGCUUUGUUUUAGUAAUCUAUACGCACCGCGCUUGAAACGACCGCCAAUCCCUGGGGUAGCGACGAUCAAAUCCCACAGUGGCCGACAGCCGAUAGCGAAGGGCGAACUGUGCUGUGUGACACAUUUGUUGAGAAGGAGCCAUGACUCAUCUGGUGAGCGCUUCAGGUACCUACUCCACGGUGGCGGCCACCACACCCGCAUCUAUCUAACUGUGUCCACCGUAUUUAACGCCGGAUGCGGCAGUGUGUGUCCACGGUGUUGCUCGCCGUUGCUGCAUAAAGACGCGUUCUGUGGUUUGGACGGGCCGGUCAGCCGUAAAGACCGCGUACGUAUUGUCACUCUUCCCGAGUUUGUCUCUGCCUCCAGCCAAAGCGUUUGGGCCGCGGAUAAGAGGUAUCAACCAGAUAGCGUGCAAAUUGAUUAUGCUUGGGGGUAUAGGGUCACGCGUUUUGGAGGCAAUACGUCGAAGACAGGUGUGCCGCCGCCGUUAUUAGAGGAGUCAAAGCCCGUAGGCCAUCCGCUCCAAAACCUGGCCGGGUAUUCGUAUGCCGAAUUGUCUCCCCCAGUGUGCCCCUUAUCCCGUAGGAGUGGGCCGAGUCCCGGGGCCACAGAAUGGAACCCUGGGAAAUCCCAGCCGAUAGGUCAAGAUAAACUUCAAUUACCGUUUUCAAAAUACAUAAGUGGUUGGGGAACAAGCGCAUCCGAUGUAGCUCUGCCGGGAAUGCGCCCGAAUGUCUUCGCUACUCCCAGUACUCGCAGGAUGAGGGUUACGUCUGUGUACGGGCGUAGAUACCAGAUCGCCACGCAUCGGUUCGCUCACCAUUACGCUGAACACUUCCCGCCUGCGGCGUCCUACCAAGUAGGGGUUAUGAUCUCAUUUCUCAGGGAACAUCGGCCGUCUCUCGACUUCAAUGACCGGGUCCAGUCUCCUAUCUUCGUUGACCCGCGCGCCUUGCUGGCCAAGGUCCCUCGGCUGGUGGUGAGAGUACCCGCUGCCAGAUACUACCUUGCUGUCCAAUCCGCACUGAGCCCAGCUAUAACGCUCGCAAGUCCCCCAUUUCGCUGCGAAUGUAAAGCUACAGAUUACAGCGCCUCGAAUUGUCCGCCAGCCACCCGGCAUGUAUACCUAACACUAUCAGCGCGGGUGGGGCAGGAUGGGUAUAUGGUGCCGGGAGGAGAUCAUUGGUCUGCGAAGGAUAAAGUCAAAGUCACCCGAGCGUGCGAAAAGCAGAGUCGUUUGACUCUUGACGGUCCCCGGGGAACUUCAAAUUUCGAGCACCUGGAAUUUACGCGCCCGGAAUGCCGACCGAAUUGCGGCUGUGAUCGACGUGUUCGGUCCCUACCCAGUAUAGUUGUAGAUUUCGUGAUCCUACGGUGCGGAGCUUGCUGGGCAGGGAACAACGAAUUGCCCAGCCUUAGUUUGAUCCAAGUGUUUUCCACUCAUUCAAGAACCCAGCUGUUUAAUUAUUAUGGUUUGGAGAAGCCAUUGCCCCCUCGUUACGUCGCGUCGCCCCCCCGGAGGAUCGCUUGGCUAGCCAUCGCCUACGAUUUUUUAUAUCCCUUCUACGAGUCGGUCCUCAAGGUUUGCGCUGUAACGGGUGACGAACUAACUUGUCAUAGGGAUCCUGCGGGGAUGUCGAAACGUGCUGAGCGGGAAUCGACGAGAGUAUCGGACACCCCUAAUUGUUAUACUUAUAAUUGGCGACCCUCCUACUUACCUAGGCGCACAGGCAGUAUGGGAUUCCCACCGACAGGCGUUCAGUCACUGCACGUAUACUUUAGACUGGUGUUCAAGGAGGACUUUGCCGUUCGGUCACAUAGGUCGGGCUUUGACUCCGGUCAAGUGAUGAUCCCCCCGAGAUUCGUAGACCAAUCUCGUGCCCAUGAUGGCAGCCACUACCCCGCGCUGAAAAAGUUAAUCCCUUACAUCACUCUUGGCCGACUUCGAGACAUUGAAGUGCAGUGCCUGCCCUUCUGCUUCGCAGUUAAGAUGAACCGUAUCCAUGUAACCAACUUGACGUGUGCGCGAGACGAGUCUGGGAAACGCUUUCGGUGUCGGCCAACCAUAUGCUUUCUGUAUAGAUCAGCGACUGAACCACGUCCGACCCCUCACGUUCUUAAUUGUGUAAGUGUCAAACACCAGUCCUGCCAAUCCGGAGCCUCAUCUACCAAAAGCUCACGAUUGCUCUCCACGCGUGGGACUCAGUGGCGCGUUAUGCGCUGGACAGGUGCCAAGCAUAUCUUUUAUCACUCUAUUCAUAAGCUAUGUACGUUAGUGAAACUAUUGUCCAGAGAUAGGUGGUGGGGGGGUGAGUUUGGAGCUGGGGUUGUCCCAUUACUCAACGCGCACCUGGUUAUGGACGUCCGAGCGUUACGUGCUACCCCCUCUCAGAUUUACCUGAGCUCGGGCGAACUUACGUGGUGCUCCACGGAGCGCGCGGGCCAGCUCUUUGUCACCAGCGGGCGUUGUGGGUUGCAGCUAUCCCUACCCGCAAUAGCAAAACACAAUCCGUCCCGAGUCCAUUAUAAUGGCAAACGCGCGUGUAGCCUGGAUUGCGUCGUUGCCCCAACCCGCAUUAUUGUUGUUUGCUUAGAUGACCUACCAAGUAAGAGCCAUGCUCCCGCACGAGCCGCCGUUCUCGUUGAAGGAUGCAUGGUUAUCCGCGGCGAGAAUGCCGAAAUGGCCUUGGUAAUAGCUCAACGGCGCGAGUCUCUGCAAAAUUUGAGAUGGAGGUCUGAGCAGACUCAUAGUAUAAGUGGCAUAUCAACGGGUCGGGCACGGGCUCAGCGUCCAUUUGAAGAUCUUCAGCCCAACGGUACGUGGCUUGAGGCUAGAAUGAUAUCAUCUGAGGAGGGGGCUGGCAACUGCGAUCCACGUCGGUCACGCUAUUGGGCCAUCCCGUGCGCCGGCCUGCAAGGCAUUUGCGGUAAUUCAAGCUUAUCAACCCAAGACGCCCAAGGUUCCAGAUUCAGAACAUCUACCGCUGAUUUUGGAUGGCGUGAAUUAUCGACCGCUAGAGCUACGACACAAACUCGUUUACAAGCAGCAAUUCUCAGAGGGGAUCUUGUCUACCUGCUAAGUAUGGCAUUUGGUCGAGUUCAAAUUACAGAAAUACAACACCUGCAACCGAUAAACGUCGCUCUUUGGGACCUUAUGGAUGGGCUGGAGGCCAGAUUCAAAACCGUAUCAUCAUGUCGAUUUAACCUUGCGUUUUUCUCAAAGCCAAUUGCGUGGGUCUGGGCACAAACCCCCACUUUUAUACCGCUUGCACGACGGUGCGUACUAACUGGCGAGGCUUCGUGUUUAUGUAAAGAAAGGGGCCCCAUUCCAUGCCCGCGGAAUGAAUUUCUUGCAUUAGCUUCAGGAUUACAGACAGGUUGCGCGCCAGUCGUUUCUGCGUUUCCAGGCAAUUGCGCUAAGCUGCACUCCCGCUUGACCAAAGUAUUGAAAGAAAACGUCUCGAGUUUCUCUGUGGACAGACGUUGUCUGAUCGUACCUAACGGGAUAUUUUCUUGGCCUAGGAAGUUCGCGCUAGAUGAUACCGGGGUGCAUACCACUCGCCUAUCCGGAUCAGCAACUACCGCUACAGCUUGGGAGUUACGGUCCUUGGGAAUCAAAAACAUGCCCGUCCCAGCCAUCAAAAGAGUCCAUGUGCGAUUAGGGUUCUUGUUGGCUAAAGAGAAAAUCGGAGAUUGGAUCCUCUUGUACUACCGGGGCGGGUCUAUAGGCGCACACUACUUUAACGGCCACUCUAUGAUGCAUAAAUAUUCGCCGAAUUCUCGGCAUGCUCAAUACAGUCAAGUACGGGUGCCUAAAUCACGAACACAACUGCAGGCUAACUACGCUCAUGCGCGGUCGCUGAGAAACGGUGCCAUCGACAGGUUAUCGAGAAUUUAUGUUCCUCGGCGUGGUCGACUACGACCCGGUCAAGUAUCCCGAGAAGCAAUAUAUGAGCGUGAGACACCUUUCCGACCAUCAGCACGGGACAGCUGUGCUCUUAGACUCGCGCUACUAUACUAUAAGAUAGUAGCGGAUUCCACCGACGCGUUUGGACCAACCUACUUAACCUCGGCCGCGGUACGUACCGGGUGUCAUGGAGGGGCUCGAGAUCCGUGCCGGGUCAAGGGUUACGCGUCCGAUUUCCGGACGAUAGCAAGGUCACCUGCAGCACUCGUAGUGAAAUUAUUUCGGCAGUUCGACGCAGCAGGGGAAAAAAAAGCCUAUUCUCUUGGAGAAUCGGUUGAUACAAUGCAUGCAACCGCUGCAUUUCCUGCUCCGUCCACCGAUCUGACCCAAGCCUUAGUCUGUUUGAUUUCACUAUAUGAUUGCGGGAAUAGCUCCAUUUGGCUGCCGGAGGUUGUCGAGGACUCACCGUUACUUGGAGCGAGUCAAAGCGCCCGUCCUUGCAUCGGGCUAUUGCGGCGUUUCGACGGGGGAUACGUAAUGUUAGAGGGCGGAGACAAUGUGCCUGUUCUGCCGGGCUAUUAUUGUGACACGCGGCGCGCCAAAUGCGUGAUGCCUGCACUGCUAGCCGCAGGUCCUUCGCUCCCGGACCUUGCCUUUCGGCCACAUGGGCCCCCUCGCCCGGGUCUCUUUAAGAGAGUGUUGACGCGGAUCCUUUCGGUUCGGCUUGCGAUCCGCCCCGUGCUGGACUGCACACGACCUUGGAGCUACGUAAGUCGGAAACAUACAUUUACUGGAAGAGGAAGCGAAGCCGCGCUGCCCGUGUUCGGAAUAGUGCUUCGUCAAGUAAAUGACGUAAACGCCGCGGUUGCAGCCACGGCGAAAACGUGCCUGCCCAACAUCGUGAAUACGGGUGCGAACCGCAGCCGGAAUAGGUUUCGCUCGAGGAGGAAAAUUCACCAGGUAAACAAACGACACCAGACCAUUGACCACUAUCCGGUACACAUAGUGACUCGCGAUUGCCUCGCACUAGGGAGGGGAACUGAUGAGCUAGCUCCCUACCAACGUCCUUGUGGCCCAACUGGACGCACCGCAACAGGGGGACCAUACUAUGUCGUGGGUACGGCGGAUAUAGAGCAAAUUGCGCGGCUAGUGUGCCUCUGUUGGUCAUACGUCGUGCUUAGGUCGCACACCGAUCAGAGCUAUUCCCCAUCGUUUGUCAGCUGCUACCCUCUGGAAGUCAGUAGCCCCGCGUCGGAGGUGACCGGCAUUAAGCUGCGGCUCCCUAUAGCGCGAAAUGCGGAAGUGGAGUUGUCCUCGUCUCAAAGUCACCACCACAACUUGCCCUGGACUAUAUUCGACAGGGGCGCGUGGCGGUGGGUACGAGUUUCGGGAUCAUCCCAGCCGGAUGUCACCACGGUAGCUUCGUCCUCUCCGGCUCCCAUGGCCCUGGCGAGGGUAGAUGUUAGGACUGGUGAGGAUCGGAUUCGUUCUCACUCAAAGCCAAGAUCUAACCAUCCCAAGACCUGCAUAAUAAGUCUUCUGCUAACCAUUGUACAGGGGAGAGUUGUGCGGAUAUCCGCCAAUAUUGUUGCUCAGGUGCCUGGAGGUAAGCUUGCGGAACAAAUCGCUUCCGCGCCACGACGUUCUAUAUCCCGCAAGGUCUGGCUAUUGAAACACUGUUCUAGGCCGUUGAGAUAUCUGCAAGCAUACCCUGCCUACCCCCGGAUAGUCAAGUGUUGCCAGUCCACCCUCUCUGACUCGAAUCACGAUCGUCUGUGUCGGAUGAUGAAGGCUUGCGCUGUUCCAUACCAUAAAGAUGCUCAGGGGAACAGGGUCUGGACCGAAGAUUUGACCAUGUCGGGGUUAAUGAAUCUACCAACGCAAAUGCGCUACGGGUGGGAGCGUAUUCGUACUUUACUACUAUUCCUUAGCAGACAGAGAGCGAAUCCUCAUUACCGAGAUAGCUCUACUCACCGGGAUUUUUUUGAAGUAAUUUCUCAGCUACCCAGAGCGUUGCUACGCUUGAUUCACUGCGAUAACUCGCGGCGUUUCGAUGUAAGGGGUCGCGGGCAAGAACGAAUACUCAACCUUUGCAUGCGCAACACUAGGUGCUCUAUGUGGAGUGGCUCGUUAUUAACUUGCCUACAAGGCUUGUGCGCAGGAUACCACGCUGCUCAGCGCACCAAGCGCCCCCUGUGCAUAGCCAGCGUCCCGUGUGGUAACGUUUGUAUACCCUCCUCUUUAUGGAAAAUUCAUUACCACGGGUCUACAGUGUCGCUCCAGGGUUACCCCGUCGCUGAUGUAAUUCCGUUAAGCGUCAGUUUCCGGCUCGGGGACACCUGGCAAUUGGCCUGCACAGUCACUUGGACCUACCCACCUGAACAGAAAAGCCGAUACGACAUCGCAAAUGCUACCUGGAACAUCCUGCCAGUUGCACAACCACGUGGGCGUACACGGUCUGUCGUUCCGUCCUACGGUCAUCACUCUGACGCCGAACCCAGUCACGAUCCACAGGUGUCGCUUGAAGUGUCGGUAACACUCCUGUGUGAGCCUAGUCUAGGUAUAGAAAUUCCCGAUUUCCCUCUUCGUACGAAAACUCUCGCCUCUUCGCGACACAUACAGGUACGAACUUUACGAUACUCAAGCACGUCGGCGAUUGUCUCCGAUCAUCCAAUAACGCGUCGCCAACGAUCCAGGCUCCUGCUGGGCGGCAUUCUUGGGGUUGCCACGAAUACAGUUGUAUCAAGUGCUUUGGGUAGCGCCACACUUCCGCACAGGCGGUUGCGAUGUUCAGCGGCUAGCGUUGUAGUUUCAUGGAGCGCCACAAUCGUCGCACCUCGAGGGCCGCCCGGCCUAUUAGAACACGUUGAAAAGAAUGACGUGCAUUCAGUCGCGGCGUCCCUUGAGGUGACCAUCUCGUAUGCACAACUAGUGCCGGGGUUGAAUGGCGAAGGGAAAAAGUUUUGGAUUGGAGAGGCUUUGUCAUUCGGCCUAUACAAUAACCGGCACCUACCGGAAUUGCGCCCGUACAAUGAUUCUGUACGGAGGAAGGUGAUCUUCGCAAGGCCUCUACCAACGUCAGUUUCAAAUACCGUCUUGUACCUGGCACCACACUAUCCGCAAUUGGCUAGGCAGGGGCCUUACGGCCUUACGAUCGAUUCAACAAGAUUCGGGUGGGCUUGUUUUACUUGGCCUGCGAUUACGAUAGGGCGGCAACCAGACGAAUACCGUAUAAGGGAAACUAGAAGUUUAGUUUGGAGCGAAGAGGACGGUCCCGCCGAGGCCGUGCGUAUAUGUGGUCCUUCUGGUGUCAACAGCUGCAGCCCCGCAGAAUCUUUUCCUGAGCUCAGCCGCAAUCUCAAUCUCAAUUACAGCGACCCGGGACCGUAUUGGAUUGUACUUCUACGCGAACAAGGAGAGGUACUAGAGCUGAUUCGAGCUGUAUGGUUACAUCUGUCUGUUUACGAUAGACAAGGGCGUAUCGUAAAAGACCCGAUGCCUCAAAUUCCAGGUAAGUCCUAUCUUAUUCCGGUUACUGACCCAAAACCAAGGGACAGAACGUAUCAGCAUAAUUCCAUGCGCUGGUCGAUUAGUCGGCGAAAGAGUAGCUGCCGUCCGAGUCAACAACACCCGUUUACUUCGUCAUCAAUCUGUAAGCCUUCGAAUUUUCUACAUGCGAUCGUGUACGGACUGGCCAACAAAACAUUUGCCCAUUACUCACCAUGGGCGAUAGUGUUGUGGAGGCCUAUAAUCACCGUACUCUCUAGGCUCUGGACUUCGGGCUAUAGUUCAAUUCUGACUCCGUUAAUGAGCGCCAGUGUUCGUAGACUAGCGCUGCAGUCUUACAUAAUUCGAGUGUGUUCAUAUAAGUCACUAAUCGCGAUCGCGGUCAGGCUUAUUCGUGCGUUGCAAUGCUUUUGGUGGUCGAAAAAGAGUGGGCGGCGUUUAUCACUAACCCCGGAGGUUAUGAAAAUUGUAAUAUUGCUGUCUCUCGUAGUGUUUUUGCAAGCAUCGGGGCAGCUUAUAUUCCACCGAGCGCGGGACCUAACGAUCGUGUCGAGCUACCAUCUACAUAGUGAAUCCAGGCUACGUCAUUAUGGUCUCUACGUGGUGCUCGAGGUUCGUCGGAAAAUUCAUAGCUAA',translations)
answ = ''
for i in range(len(output)):
    answ = answ + output[i]



#every three correspond to an amino acid found in the FASTA files
#ooooooooooooooooooooooo